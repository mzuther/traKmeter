{# -*- mode: Jinja2; -*- ---------------------------------------------------- #}
{#                                                                            #}
{#  FrutJUCE                                                                  #}
{#  ========                                                                  #}
{#  Common classes for use with the JUCE library                              #}
{#                                                                            #}
{#  Copyright (c) 2010-2020 Martin Zuther (http://www.mzuther.de/)            #}
{#                                                                            #}
{#  This program is free software: you can redistribute it and/or modify      #}
{#  it under the terms of the GNU General Public License as published by      #}
{#  the Free Software Foundation, either version 3 of the License, or         #}
{#  (at your option) any later version.                                       #}
{#                                                                            #}
{#  This program is distributed in the hope that it will be useful,           #}
{#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #}
{#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #}
{#  GNU General Public License for more details.                              #}
{#                                                                            #}
{#  You should have received a copy of the GNU General Public License         #}
{#  along with this program.  If not, see <http://www.gnu.org/licenses/>.     #}
{#                                                                            #}
{#  Thank you for using free software!                                        #}
{#                                                                            #}
{# -------------------------------------------------------------------------- #}


{% macro preamble(copyright) %}
#! /usr/bin/env bash

{% for line in copyright -%}
#  {{ line }}
{% endfor %}


###############################################################################
#
#  WARNING: this file is auto-generated, please do not edit!
#
###############################################################################

binary_dir="./final"


function finalise_binary
{
    input_file=$1
    output_file="$binary_dir/$input_file"

    if [ -f "./$input_file" ]; then
        if [ ! -f "$output_file" ] || [ "./$input_file" -nt "$output_file" ]; then
            printf "  Finalising binary:   %s -->\n" "$input_file"
            printf "                       %s\n"     "$output_file"

            mkdir -p "$(dirname "./$output_file")"
            cp "./$input_file" "./$output_file"

            printf "\n"
        fi
    fi
}


function finalise_symbols
{
    input_file=$1
    output_file="$binary_dir/debug_symbols/$input_file"

    if [ -f "./$input_file" ]; then
        if [ ! -f "$output_file" ] || [ "./$input_file" -nt "$output_file" ]; then
            printf "  Finalising symbols:  %s -->\n" "$input_file"
            printf "                       %s\n"     "$output_file"

            mkdir -p "$(dirname "./$output_file")"
            cp "./$input_file" "./$output_file"

            printf "\n"
        fi
    fi
}


printf "\n  === Finalising binaries ===\n\n"

mkdir -p "$binary_dir/debug_symbols"

{% endmacro %}



{% macro postamble() %}
printf "  Done.\n\n\n"
{% endmacro %}



{% macro standalone_linux(name, variant, platform) %}
finalise_binary  "standalone/{{ name.short }}_{{ variant.short }}{{platform}}"
{% endmacro %}



{% macro vst2_linux(name, variant, platform) %}
finalise_binary  "vst2/{{ name.short }}_{{ variant.short }}_vst2{{platform}}.so"
{% endmacro %}



{% macro standalone_windows(name, variant, platform) %}
finalise_binary  "standalone/{{ name.real }} ({{ variant.real }}{{platform}}).exe"
finalise_symbols "standalone/{{ name.real }} ({{ variant.real }}{{platform}}).pdb"
{% endmacro %}



{% macro vst2_windows(name, variant, platform) %}
finalise_binary  "vst2/{{ name.real }} ({{ variant.real }}{{platform}}).dll"
finalise_symbols "vst2/{{ name.real }} ({{ variant.real }}{{platform}}).pdb"
{% endmacro %}



{% macro vst3_windows(name, variant, platform) %}
finalise_binary  "vst3/{{ name.short }}.vst3/Contents/x86{{ platform | replace (' x', '_') }}-win/{{ name.real }} ({{ variant.real }}{{platform}}).vst3"
finalise_symbols "vst3/{{ name.short }}.vst3/Contents/x86{{ platform | replace (' x', '_') }}-win/{{ name.real }} ({{ variant.real }}{{platform}}).pdb"
{% endmacro %}
