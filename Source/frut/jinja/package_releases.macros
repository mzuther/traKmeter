{# -*- mode: Jinja2; -*- ---------------------------------------------------- #}
{#                                                                            #}
{#  FrutJUCE                                                                  #}
{#  ========                                                                  #}
{#  Common classes for use with the JUCE library                              #}
{#                                                                            #}
{#  Copyright (c) 2010-2020 Martin Zuther (http://www.mzuther.de/)            #}
{#                                                                            #}
{#  This program is free software: you can redistribute it and/or modify      #}
{#  it under the terms of the GNU General Public License as published by      #}
{#  the Free Software Foundation, either version 3 of the License, or         #}
{#  (at your option) any later version.                                       #}
{#                                                                            #}
{#  This program is distributed in the hope that it will be useful,           #}
{#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #}
{#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #}
{#  GNU General Public License for more details.                              #}
{#                                                                            #}
{#  You should have received a copy of the GNU General Public License         #}
{#  along with this program.  If not, see <http://www.gnu.org/licenses/>.     #}
{#                                                                            #}
{#  Thank you for using free software!                                        #}
{#                                                                            #}
{# -------------------------------------------------------------------------- #}


{% macro preamble(copyright, version) %}
#!/bin/bash

{% for line in copyright -%}
#  {{ line }}
{% endfor %}


###############################################################################
#
#  WARNING: this file is auto-generated, please do not edit!
#
###############################################################################

version="{{version}}"

executable_dir="./final"
release_dir="releases"


function archive_create
{
    rm -rf "/tmp/$archive_dir"

    echo "  Creating archive in \"/tmp/$archive_dir\":"
    mkdir -p "/tmp/$archive_dir"
    echo
}


function archive_add
{
    filename="$1"
    source_dir="$2"
    target_dir=$(dirname "/tmp/$archive_dir/$1")

    if [ ! -d "$target_dir" ]; then
        mkdir -p "$target_dir"
    fi

    if [ -f "$source_dir/$filename" ]; then
        echo "  [+] $filename"
        cp --dereference "$source_dir/$filename" "/tmp/$archive_dir/$1"
    elif [ -d "$source_dir/$filename" ]; then
        echo "  [+] $filename/*"
        cp --dereference --recursive "$source_dir/$filename/" "/tmp/$archive_dir/$1"
    else
        echo "  [ ] $filename  --> not added"
    fi
}


function archive_del
{
    filename="$1"

    if [ -f "/tmp/$archive_dir/$filename" ]; then
        echo "  [-] $filename"
        rm "/tmp/$archive_dir/$filename"
    elif [ -d "/tmp/$archive_dir/$filename" ]; then
        echo "  [-] $filename/*"
        rm -rf "/tmp/$archive_dir/$filename/"
    else
        echo "  [ ] $filename  --> not deleted"
    fi
}


function archive_compress
{
    archive_type=$1
    old_dir=$(pwd)

    echo
    echo "  Compressing archive..."

    cd /tmp || exit

    if [ "$archive_type" = "bzip2" ]; then
        archive_name="$archive_dir.tar.bz2"
        rm -f "$archive_name"
        tar --create --bzip2 --verbose --file "$archive_name" "$archive_dir" > /dev/null
    elif [ "$archive_type" = "gzip" ]; then
        archive_name="$archive_dir.tar.gz"
        rm -f "$archive_name"
        tar --create --gzip --verbose --file "$archive_name" "$archive_dir" > /dev/null
    elif [ "$archive_type" = "zip" ]; then
        archive_name="$archive_dir.zip"
        rm -f "$archive_name"
        zip --recurse-paths "$archive_name" "$archive_dir" > /dev/null
    fi

    cd "$old_dir" || exit
}


function archive_store
{
    archive_type=$1
    destination_dir=$2

    if [ "$archive_type" = "bzip2" ]; then
        archive_name="$archive_dir.tar.bz2"
    elif [ "$archive_type" = "gzip" ]; then
        archive_name="$archive_dir.tar.gz"
    elif [ "$archive_type" = "zip" ]; then
        archive_name="$archive_dir.zip"
    fi

    rm -rf "/tmp/$archive_dir/"

    if [ -f "$destination_dir/$archive_name" ]; then
        echo "  Overwriting \"$destination_dir/$archive_name\"..."
    else
        echo "  Storing at \"$destination_dir/$archive_name\"..."
    fi

    mv "/tmp/$archive_name" "$destination_dir/$archive_name"

    echo "  Done."
    echo
    echo
}


# ----- General -----

./finalise_executables.sh

mkdir -p "./releases/linux/i386"
mkdir -p "./releases/linux/amd64"

mkdir -p "./releases/windows/i386"
mkdir -p "./releases/windows/amd64"
mkdir -p "./releases/windows/debug_symbols"
{% endmacro %}



{% macro postamble() %}
# ----- Windows debug symbols -----

echo "  === Windows debug symbols ==="
echo

archive_dir="debug-symbols_$version"

archive_create

archive_add "standalone" "$executable_dir/debug_symbols"
archive_add "vst2" "$executable_dir/debug_symbols"
archive_add "vst3" "$executable_dir/debug_symbols"

archive_compress "zip"
archive_store "zip" "$release_dir/windows"
{% endmacro %}



{% macro standalone_linux(name, variants, additions, platform, bits) %}
# ----- GNU/Linux Standalone ({{bits}} bit) -----

echo "  === GNU/Linux Standalone $version ({{bits}} bit) ==="
echo

archive_dir="{{ name.short }}-linux{{bits}}-standalone_$version"

archive_create

{% for variant in variants %}
archive_add "{{ name.short }}_{{variant.short}}{{platform}}" "$executable_dir"
{% endfor %}

{% for line in additions['default'] %}
{{ line }}
{% endfor -%}

{% for line in additions['standalone_linux_' + bits] %}
{{ line }}
{% endfor %}

archive_compress "gzip"
archive_store "gzip" "$release_dir/linux"
{% endmacro %}



{% macro vst2_linux(name, variants, additions, platform, bits) %}
# ----- GNU/Linux VST2 ({{bits}} bit) -----

echo "  === GNU/Linux VST2 $version ({{bits}} bit) ==="
echo

archive_dir="{{ name.short }}-linux{{bits}}-vst2_$version"

archive_create

{% for variant in variants %}
archive_add "{{ name.short }}_{{variant.short}}_vst2{{platform}}.so" "$executable_dir"
{% endfor %}

{% for line in additions['default'] %}
{{ line }}
{% endfor -%}

{% for line in additions['vst2_linux_' + bits] %}
{{ line }}
{% endfor %}

archive_compress "gzip"
archive_store "gzip" "$release_dir/linux"
{% endmacro %}



{% macro standalone_windows(name, variants, additions, platform, bits) %}
# ----- Windows Standalone ({{bits}} bit) -----

echo "  === Windows Standalone $version ({{bits}} bit) ==="
echo

archive_dir="{{ name.short }}-w{{bits}}-standalone_$version"

archive_create

{% for variant in variants %}
archive_add "{{ name.real }} ({{variant.real}}{{platform}}).exe" "$executable_dir"
{% endfor %}

{% for line in additions['default'] %}
{{ line }}
{% endfor -%}

{% for line in additions['standalone_windows_' + bits] %}
{{ line }}
{% endfor %}

archive_compress "zip"
archive_store "zip" "$release_dir/windows"
{% endmacro %}



{% macro vst2_windows(name, variants, additions, platform, bits) %}
# ----- Windows VST2 ({{bits}} bit) -----

echo "  === Windows VST2 $version ({{bits}} bit) ==="
echo

archive_dir="{{ name.short }}-w{{bits}}-vst2_$version"

archive_create

{% for variant in variants %}
archive_add "{{ name.real }} ({{variant.real}}{{platform}}).dll" "$executable_dir"
{% endfor %}

{% for line in additions['default'] %}
{{ line }}
{% endfor -%}

{% for line in additions['vst2_windows_' + bits] %}
{{ line }}
{% endfor %}

archive_compress "zip"
archive_store "zip" "$release_dir/windows"
{% endmacro %}



{% macro vst3_windows(name, variants, additions, platform, bits) %}
# ----- Windows VST3 ({{bits}} bit) -----

echo "  === Windows VST3 $version ({{bits}} bit) ==="
echo

archive_dir="{{ name.short }}-w{{bits}}-vst3_$version"

archive_create

{% for variant in variants %}
archive_add "{{ name.real }} ({{variant.real}}{{platform}}).vst3" "$executable_dir"
{% endfor %}

{% for line in additions['default'] %}
{{ line }}
{% endfor -%}

{% for line in additions['vst3_windows_' + bits] %}
{{ line }}
{% endfor %}

archive_compress "zip"
archive_store "zip" "$release_dir/windows"
{% endmacro %}
